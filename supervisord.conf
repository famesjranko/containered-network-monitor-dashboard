[supervisord]
nodaemon=true

[program:redis]
command=/usr/bin/redis-server
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:check_internet]
command=/bin/bash -c "/app/check_internet.sh"
autostart=true
autorestart=true
startsecs=0
startretries=3
exitcodes=0
stopsignal=TERM
killasgroup=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
# Run every 60 seconds
autorestart=true
stopasgroup=true
# This ensures the script runs every 60 seconds
# by restarting it after it finishes.
# The script itself should exit after one run.
# If the script takes longer than 60 seconds,
# supervisord will kill it and restart it.
# This is a simple way to achieve a cron-like behavior
# within supervisord for a script that runs and exits.
# If the script is designed to run continuously,
# then this approach needs to be adjusted.
# For now, assuming check_internet.sh runs and exits.
# If it doesn't, we might need a different strategy (e.g., cron inside container).
# Given the current check_internet.sh, it runs and exits.
# So, this will make it run every minute.
# The sleep 30 in the original command was problematic.
# This approach makes supervisord manage the interval.
# The script should not have an internal loop or sleep.
# It should perform its check and exit.

[program:dashboard]
command=python internet_status_dashboard.py
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
